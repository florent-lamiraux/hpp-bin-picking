// Copyright (c) 2023 CNRS
// Author: Florent Lamiraux
//

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.

#ifndef HPP_BIN_PICKING_CORBA_BIN_PICKING_HH
#define HPP_BIN_PICKING_CORBA_BIN_PICKING_HH

#include <hpp/common.idl>

module hpp {
  module corbaserver {
    module bin_picking {
      interface BinPicking {
        /// \{
        /// Effectors

        /// Create a rigid object containing the geometries of an end effector
        ///
        /// The geometries belonging to the joints that are fixed with respect
        /// to the \link hpp::pinocchio::Gripper gripper \endlink are gathered
	/// with their relative pose with respect to the gripper frame.
        ///
        /// \param name name of the effector that is created,
        /// \param gripperName name of the gripper,
        /// \param q configuration that provides the relative pose between
        ///        objects,
        /// \param transitionId index of the transition that defines the
        ///        relative motions between joints.
        void createEffector(in string name, in string gripperName,
                            in floatSeq q, in long transitionId) raises(Error);
        /// Add obstacle to an end effector
        /// \param effectorName name of the effector,
        /// \param obstacleName name of the obstacle (geometry in pinocchio),
        /// \param securityMargin security margin for the collision tests.
        void addObstacleToEffector(in string effectorName,
            in string obstacleName, in double securityMargin) raises(Error);
        /// Test collision of an effector
        /// \param name name of the effector,
        /// \param handle name of the handle the gripper is aligned with,
        /// \param q configuration of the system,
        /// \retval report message in case of collision,
        /// \retval gripperAxis vector of coordinates of the x-axis of the
        ///         gripper in the world frame.
        /// \return true if there is a collision.
        /// \note the configuration does not neet to specify all the robot
        ///       and object configurations, but only those that have been
        ///       added as obstacle to the effector and the one that holds the
        ///       handle.
        boolean collisionTest(in string name, in string handle, in floatSeq q,
                              out string report, out floatSeq gripperAxis)
          raises(Error);
        /// \}

        /// \{
        /// Handles

        /// Discretize handle
        /// Create several handles by discretizing the free axis of rotation.
        /// \param name name of the handle,
        /// \param nbHandles number of new handles.
        /// \note the handle should have only one false flag out of three for
        ///       rotation degrees of freedom and none for translation degrees
        ///       of freedom.
        /// \note new handles are created and added to the problem solver.
        void discretizeHandle(in string name, in long nbHandles) raises(Error);
        /// \}
      };
    }; // interface BinPicking
  }; // module bin_picking
}; // module hpp

#endif // HPP_BIN_PICKING_CORBA_BIN_PICKING_HH
